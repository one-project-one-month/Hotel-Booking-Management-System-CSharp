@page "/userprofile/admin-profile-list"
@using HotelManagementSystem_Web.Layout.AdminLayout
@using HotelManagementSystem_Web.Models
@layout AdminLayout
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
@inject NavigationManager nav


<h3 class="text-center mb-4" style="color: #e60000;">Admin User Profile</h3>


<table class="table table-bordered align-middle" style="background-color: #fff0f0;">
    <thead style="background-color: #ffe6e6;">
        <tr>
            <th class="ps-2">User Name</th>
            <th class="ps-2">Email</th>
            <th class="ps-2">Role Name</th>
            <th class="ps-2">Gender</th>
            <th class="ps-2">Date Of Birth</th>
            <th class="ps-2">Address</th>
            <th class="ps-2">Created Date</th>           
        </tr>
    </thead>
    <tbody style="background-color: white;">
        @foreach (var user in userInfos.Skip((currentPage - 1) * pageSize).Take(pageSize))
        {
            <tr>
                <td class="ps-2">@user.UserName</td>
                <td class="ps-2">@user.Email</td>
                <td class="ps-2">@user.RoleName</td>
                <td class="ps-2">@user.Gender</td>
                <td class="ps-2">@user.DateOfBirth</td>
                <td class="ps-2">@user.Address</td>
                <td class="ps-2">@user.CreatedAt</td>              
            </tr>
        }
    </tbody>
</table>

<!-- Pagination -->
<div class="d-flex justify-content-between align-items-center mt-3">
    <button class="btn btn-light" @onclick="PreviousPage" disabled="@(!CanGoBack)">Previous</button>
    <span>Page @currentPage of @totalPages</span>
    <button class="btn btn-light" @onclick="NextPage" disabled="@(!CanGoForward)">Next</button>
</div>


@code {
    List<AdminUserInfoModel> userInfos = new List<AdminUserInfoModel>();
    private int currentPage = 1;
    private int pageSize = 10;

    private int totalPages => (int)Math.Ceiling((double)(userInfos?.Count ?? 0) / pageSize);
    private bool CanGoBack => currentPage > 1;
    private bool CanGoForward => currentPage < totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfosAsync();
    }

    private async Task LoadUserInfosAsync()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<GetAllUserInfoResponseModel>("https://localhost:7161/User/GetAllUserProfileAsync");

            if (response != null && response.IsSuccess)
            {
                userInfos = response.Data ?? new List<AdminUserInfoModel>();
            }
            else
            {               
                await JSRuntime.InvokeVoidAsync("alert", response?.Message ?? "Failed to load users.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading user profiles: {ex.Message}");
        }
    }

    private void NextPage()
    {
        if (CanGoForward) currentPage++;
        StateHasChanged();
    }

    private void PreviousPage()
    {
        if (CanGoBack) currentPage--;
        StateHasChanged();
    }

}

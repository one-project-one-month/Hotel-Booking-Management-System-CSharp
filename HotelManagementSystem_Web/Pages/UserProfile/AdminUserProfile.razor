@page "/userprofile/admin-profile"
@using HotelManagementSystem_Web.Layout.AdminLayout
@using HotelManagementSystem_Web.Models
@using Newtonsoft.Json
@using System.Text
@using static System.Net.Mime.MediaTypeNames
@layout AdminLayout
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
@inject NavigationManager nav

<div class="card shadow-lg p-4 mx-auto mt-4" style="width: 90%; max-width: 900px;">
    <div class="card-body">
        <h4 class="text-center mb-4">User Profile</h4>
        <EditForm Model="@userProfile" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-5 d-flex flex-column align-items-center">
                    <div class="card p-3 shadow-sm" style="width: 100%;">
                        <div class="position-relative d-flex justify-content-center">
                            @if (!string.IsNullOrEmpty(userProfile.ProfileImg))
                            {
                                <img src="data:@userProfile.ProfileImgMimeType;base64,@userProfile.ProfileImg" class="rounded-circle img-thumbnail shadow" style="width: 200px; height: 200px; object-fit: cover;" />
                            }
                            else
                            {
                                <img src="default-avatar.png" class="rounded-circle img-thumbnail shadow" style="width: 200px; height: 200px; object-fit: cover;" />
                            }

                            <label class="upload-overlay" for="userPhoto">
                                <i class="bi bi-camera-fill fs-3 text-white"></i>
                            </label>
                        </div>

                        <div class="text-center mt-2">
                            <label for="userPhoto" class="btn btn-outline-primary btn-sm">
                                Upload Photo
                            </label>
                        </div>

                        <InputFile id="userPhoto" class="d-none" OnChange="@OnInputFileChange" />
                    </div>
                </div>

                <div class="col-md-7">
                    <div class="card p-3 shadow-sm" style="width: 100%;">
                        <div class="mb-3">
                            <label class="form-label">User Name</label>
                            <InputText class="form-control" @bind-Value="@userProfile.UserName" />
                            <ValidationMessage For="@(() => userProfile.UserName)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="@userProfile.Email" />
                            <ValidationMessage For="@(() => userProfile.Email)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Phone No</label>
                            <InputText class="form-control" @bind-Value="@userProfile.PhoneNumber" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" class="form-control" @bind-Value="@userProfile.Password" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Date Of Birth</label>
                            <InputDate class="form-control" @bind-Value="@userProfile.DateOfBirth" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Gender</label>
                            <InputSelect class="form-control" @bind-Value="@userProfile.Gender">
                                @foreach (Gender gender in Enum.GetValues(typeof(Gender)))
                                {
                                    <option value="@gender">@gender</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Address</label>
                            <InputText class="form-control" @bind-Value="@userProfile.Address" />
                        </div>

                        <div class="d-flex justify-content-end mt-3">
                            <button type="submit" class="btn btn-success me-1" @onclick="SaveUserProfile">
                                Save
                            </button>
                            <button type="button" class="btn btn-outline-secondary" @onclick="ClearForm">
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-success">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">Success</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                User profile saved successfully!
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

@code {
    private UserProfile userProfile = new UserProfile();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imgFile = e.File;
        var buffer = new byte[imgFile.Size];
        await imgFile.OpenReadStream().ReadAsync(buffer);
        userProfile.ProfileImg = Convert.ToBase64String(buffer);
        userProfile.ProfileImgMimeType = imgFile.ContentType;
        // userProfile.ProfileImg = $"data:{imgFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task HandleValidSubmit()
    {
        await SaveUserProfile();

        Console.WriteLine("User created!");
    }

    private async Task SaveUserProfile()
    {       
        var resp = await httpClient.PostAsJsonAsync("api/User/CreateUserProfileByAdminAsync", userProfile);        

        if (resp.IsSuccessStatusCode)
        {
            var jsonStr = await resp.Content.ReadAsStringAsync();
            Console.WriteLine(jsonStr);

            await ShowSuccessModal();
            nav.NavigateTo("/user-home");
        }
        else
        {
            var error = await resp.Content.ReadAsStringAsync();
            Console.Error.WriteLine("Error saving profile: " + error);
        }
    }

    private async Task ShowSuccessModal()
    {
        await JSRuntime.InvokeVoidAsync("bootstrapInterop.showModal", "successModal");
    }

    private void ClearForm()
    {
        userProfile = new UserProfile();
    }
}

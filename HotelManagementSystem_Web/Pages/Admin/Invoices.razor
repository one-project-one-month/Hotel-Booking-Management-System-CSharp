@page "/admin/invoices"
@using Newtonsoft.Json
@layout AdminLayout

@inject IConfiguration Configuration
@inject HttpClient Http
@inject IJSRuntime JS


<PageTitle>Invoices Management</PageTitle>

<h1>Invoice Management</h1>

<h3>Download Invoice</h3>

<input @bind="invoiceCode" placeholder="Enter Invoice Code" class="form-control mb-2"/>

<button class="btn btn-primary" @onclick="DownloadInvoice">Download PDF</button>

<hr/>

<h3>Invoice lists</h3>

@if (invoiceList == null)
{
    <p><em>Loading invoices...</em></p>
}
else if (!invoiceList.Any())
{
    <p><em>No invoices found.</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
        <tr>
            <th>Invoice Code</th>
            @* <th>Customer Name</th> *@
            <th>Check In Time</th>
            <th>Check Out Time</th>
            <th>Total Amount</th>
            <th>Download</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var invoice in invoiceList)
        {
            <tr>
                <td>@invoice.InvoiceCode</td>
                @* <td>@invoice.CustomerName</td> *@
                <td>@invoice.CheckInTime.ToString("yyyy-MM-dd")</td>
                <td>@invoice.CheckOutTime.ToString("yyyy-MM-dd")</td>
                <td>@invoice.TotalAmount.ToString("C")</td>
                <td>
                    <button class="btn btn-sm btn-success"
                            @onclick="@(() => DownloadInvoice(invoice.InvoiceId.ToString()))">Download
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private string invoiceCode = "";
    private List<Invoice>? invoiceList;

    protected override async Task OnInitializedAsync()
    {
        var res = await Http.GetAsync("api/Invoices/all");
        if (res.IsSuccessStatusCode)
        {
            var jsonStr = await res.Content.ReadAsStringAsync();
            invoiceList = JsonConvert.DeserializeObject<List<Invoice>>(jsonStr);
        }
    }

    private async Task DownloadInvoice()
    {
        await DownloadInvoice(invoiceCode);
    }

    private async Task DownloadInvoice(string id)
    {
        if (string.IsNullOrWhiteSpace(id))
        {
            await JS.InvokeVoidAsync("alert", "Invoice ID is required.");
            return;
        }

        string requestUrl;
        if (Guid.TryParse(id, out _))
        {
            // It's a full invoiceId (GUID)
            requestUrl = $"api/Invoices/download/id/{id}";
        }
        else
        {
            // It's likely an invoiceCode (last 4 chars of GUID)
            requestUrl = $"api/Invoices/download/{id}";
        }

        var response = await Http.GetAsync(requestUrl);

        if (response.IsSuccessStatusCode)
        {
            var pdfBytes = await response.Content.ReadAsByteArrayAsync();
            var base64 = Convert.ToBase64String(pdfBytes);
            var formattedInvoiceId = id[^4..].ToUpper();
            await JS.InvokeVoidAsync("downloadFileFromBase64", base64, $"HotelInvoice_{formattedInvoiceId}.pdf", "application/pdf");

            // code to clear the input field after download
            invoiceCode = string.Empty;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Failed to download invoice.");
        }
    }

}



